Refactoring Plan
================

1. Goals:
   - Adhere to OOP principles by utilising abstract classes, inheritance, etc. This will improve code maintainability and extensibility.
   - Different teams have done different methods of implementing the same thing.

2. Current Issues:
   - Mismatched implementation of item typing (some have used entity component version vs tag component. Doesn't allow for universal type checking in shop, etc.)
   - Too many specific methods that share overlap (which can be abstracted into a parent class)
   - We need more inheritance.
   - Improved groupings (e.g., factories, enemy spawning).

3. Scope:
   - Item factories (incl. weapons)
   - Tag component
   - Inventory stuff [opt.]

4. Approach:
   - Step 1: [First change, e.g., extract function/class]
   - Step 2: [Second change, e.g., remove duplicate logic]
   - Step 3: [Third change, e.g., improve naming or structure]
   - ...

5. Risks & Considerations:
   - [Potential issues, e.g., breaking backward compatibility, performance impact]

6. Testing Strategy:
   - [Unit tests, integration tests, regression tests, etc.]

7. Rollout Plan:
   - [How will the refactor be introduced? e.g., feature branch, staged release]

8. Success Criteria:
   - [How will you measure success? e.g., reduced lines of duplicate code, easier onboarding, faster runtime]

9. Notes:
    - [Any extra information or follow-up tasks]

10. Steps:
    - Decided to make itemFactory a more basic class that weapons extends from
    - stats