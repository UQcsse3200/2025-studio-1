package com.csse3200.game.components.player;

import com.csse3200.game.components.ArmourComponent;
import com.csse3200.game.components.CombatStatsComponent;
import com.csse3200.game.entities.Entity;
import com.csse3200.game.entities.configs.Armour;
import com.csse3200.game.rendering.TextureRenderComponent;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;

public class ArmourEquipComponentTest {
    Entity player;

    @BeforeEach
    void setup() {
        this.player = new Entity();

        player.addComponent(new ArmourEquipComponent());
        TextureRenderComponent tex = Mockito.mock(TextureRenderComponent.class);
        Mockito.doNothing().when(tex).setZIndex(Mockito.anyFloat()); //generated by ChatGPT
        Mockito.when(tex.getZIndex()).thenReturn(100f);

        CombatStatsComponent comb = Mockito.mock(CombatStatsComponent.class);
        Mockito.doNothing().when(comb).addProtection(Mockito.anyInt());

        player.addComponent(tex);
        player.addComponent(comb);
        player.addComponent(new PlayerActions());
    }

    Entity equipHood() {
        Entity hood = new Entity();
        hood.addComponent(new ArmourComponent(Armour.HOOD.getConfig()));
        TextureRenderComponent tex = Mockito.mock(TextureRenderComponent.class);
        Mockito.doNothing().when(tex).setZIndex(Mockito.anyFloat()); //generated by ChatGPT
        Mockito.when(tex.getZIndex()).thenReturn(100f);
        hood.addComponent(tex);

        player.getComponent(ArmourEquipComponent.class).setItem(hood);
        return hood;
    }

    Entity equipChestplate() {
        Entity chestplate = new Entity();
        chestplate.addComponent(new ArmourComponent(Armour.CHESTPLATE.getConfig()));
        TextureRenderComponent tex = Mockito.mock(TextureRenderComponent.class);
        Mockito.doNothing().when(tex).setZIndex(Mockito.anyFloat()); //generated by ChatGPT
        Mockito.when(tex.getZIndex()).thenReturn(100f);
        chestplate.addComponent(tex);

        player.getComponent(ArmourEquipComponent.class).setItem(chestplate);
        return chestplate;
    }

    @Test
    @DisplayName("Testing chestplate equipping.")
    void testEquipChestplate() {
        Entity chestplate = equipChestplate();
        assertTrue(player.getComponent(ArmourEquipComponent.class).currentlyEquippedArmour.containsKey(chestplate));
    }

    @Test
    @DisplayName("Testing hood equipping.")
    void testEquipHood() {
        Entity hood = equipHood();
        assertTrue(player.getComponent(ArmourEquipComponent.class).currentlyEquippedArmour.containsKey(hood));
    }

    @Test
    @DisplayName("Testing equipping a null entity.")
    void equipNullArmour() {
        assertThrows(IllegalArgumentException.class, () -> player.getComponent(ArmourEquipComponent.class).setItem(null));
    }

    @Test
    @DisplayName("Testing equipping a non-armour entity.")
    void equipArmourWithoutArmourComponent() {
        assertThrows(IllegalArgumentException.class, () -> player.getComponent(ArmourEquipComponent.class).setItem(new Entity()));
    }

    @Test
    @DisplayName("Testing equipping multiple armour pieces of the same type.")
    void equipDuplicateArmour() {
        this.equipHood();
        assertEquals(1, player.getComponent(ArmourEquipComponent.class).currentlyEquippedArmour.size());
        this.equipHood();
        assertEquals(1, player.getComponent(ArmourEquipComponent.class).currentlyEquippedArmour.size());
    }
}
